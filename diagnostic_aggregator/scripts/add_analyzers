#!/usr/bin/env python

NAME='add_analyzers'

import sys
import optparse
from bondpy import bondpy
from diagnostic_msgs.srv import AddDiagnostics
import roslib; roslib.load_manifest('rosparam')
import rosparam
import rospy

class AddAnalyzers:

    def __init__(self, args):
        rospy.on_shutdown(self.remove_group)
        self.add_analyzers(args)

    def remove_group(self):
        self.bond.shutdown()

    def add_analyzers(self, myargv):
        usage = """
    %prog allows you to dynamically add a group to the diagnostic aggregator,
    which is automatically removed when this node dies.

    Usage: %prog [options] analyzer_yaml namespace

    analyzer_yaml contains the definitions for analyzers to be added to the
                  aggregator

    namespace     string defining the namespace into which to load parameters
                  for reading by the aggregator.
    """
        parser = optparse.OptionParser(usage=usage, prog=NAME)
        parser.add_option('-t', '--timeout', action='store', type='float', dest='timeout', default=None, help='time in seconds to wait for the diagnostic_agg service to come up before timing out. Default waits indefinitely')
        options, args = parser.parse_args(myargv[1:])

        if len(args) == 0:
            parser.error('Invalid arguments. You must specify a yaml file to load from and a namespace to load into')
        elif len(args) == 1:
            parser.error('Invalid arguments. You must specify a namespace into which to load parameters')
        elif len(args) > 2:
            parser.error('Too many arguments')

        paramlist = rosparam.load_file(args[0])
        namespace = args[1]
        for params, ns in paramlist:
            rosparam.upload_params(namespace + '/' + ns, params)

        self.bond = bondpy.Bond("/diagnostics_agg_bond", namespace)
        self.bond.start()

        try:
            rospy.wait_for_service('/diagnostics_agg/add_diagnostics', timeout=options.timeout)
            add_diagnostics = rospy.ServiceProxy('/diagnostics_agg/add_diagnostics', AddDiagnostics)
            resp = add_diagnostics(load_namespace=namespace)
            if resp.success:
                rospy.loginfo('Successfully added analyzers to diagnostic aggregator')
            else:
                rospy.logerr('Did not add any analyzers to diagnostic aggregator: ' + resp.message)
                rospy.signal_shutdown('')
        except rospy.service.ServiceException:
            rospy.logerr(NAME + ' service returned failure - missing aggregator or failed init of analyzer group?')
            rospy.signal_shutdown('')
        except rospy.ROSException:
            rospy.logerr(NAME + ' add timed out while waiting for diagnostics_agg service, or ROS shutdown')
            rospy.signal_shutdown('')

        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('add_analyzers')
    AddAnalyzers(rospy.myargv())
